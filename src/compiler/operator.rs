#[derive(Debug, PartialEq, Clone, Copy)]
pub enum OperatorKind {
    Accessor,         //   …  .  …
    New,              //     new …
    Increment,        //      ++ … | … ++
    Decrement,        //      -- … | … --
    LogicalNot,       //       ! …
    BitwiseNot,       //       ~ …
    Typeof,           //  typeof …
    Void,             //    void …
    Delete,           //  delete …
    Multiplication,   //   …  *  …
    Division,         //   …  /  …
    Remainder,        //   …  %  …
    Exponent,         //   …  ** …
    Addition,         //   …  +  … | + …
    Subtraction,     //   …  -  … | - …
    BitShiftLeft,     //   …  << …
    BitShiftRight,    //   …  >> …
    UBitShiftRight,   //   … >>> …
    Lesser,           //   …  <  …
    LesserEquals,     //   …  <= …
    Greater,          //   …  >  …
    GreaterEquals,    //   …  >= …
    InstanceOf,       //   … instanceof …
    In,               //   …  in …
    StrictEquality,   //   … === …
    StrictInequality, //   … !== …
    Equality,         //   …  == …
    Inequality,       //   …  != …
    BitwiseAnd,       //   …  &  …
    BitwiseXor,       //   …  ^  …
    BitwiseOr,        //   …  |  …
    LogicalAnd,       //   …  && …
    LogicalOr,        //   …  || …
    Conditional,      //   …  ?  …  :  …
    Assign,           //   …  =  …
    AddAssign,        //   …  += …
    SubtractAssign,  //   …  -= …
    ExponentAssign,   //   … **= …
    MultiplyAssign,   //   …  *= …
    DivideAssign,     //   …  /= …
    RemainderAssign,  //   …  %= …
    BSLAssign,        //   … <<= …
    BSRAssign,        //   … >>= …
    UBSRAssign,       //   … >>>= …
    BitAndAssign,     //   …  &= …
    BitXorAssign,     //   …  ^= …
    BitOrAssign,      //   …  |= …
    Spread,           //     ... …
}

use self::OperatorKind::*;

impl ToString for OperatorKind {
    fn to_string(&self) -> String {
        let str = match *self {
            Accessor => ".",
            New => "new",
            Increment => "++",
            Decrement => "--",
            LogicalNot => "!",
            BitwiseNot => "~",
            Typeof => "typeof",
            Void => "void",
            Delete => "delete",
            Multiplication => "*",
            Division => "/",
            Remainder => "%",
            Exponent => "**",
            Addition => "+",
            Subtraction => "-",
            BitShiftLeft => "<<",
            BitShiftRight => ">>",
            UBitShiftRight => ">>>",
            Lesser => "<",
            LesserEquals => "<=",
            Greater => ">",
            GreaterEquals => ">=",
            InstanceOf => "instanceof",
            In => "in",
            StrictEquality => "===",
            StrictInequality => "!==",
            Equality => "==",
            Inequality => "!=",
            BitwiseAnd => "&",
            BitwiseXor => "^",
            BitwiseOr => "|",
            LogicalAnd => "&&",
            LogicalOr => "||",
            Conditional => "?",
            Assign => "=",
            AddAssign => "+=",
            SubtractAssign => "-=",
            ExponentAssign => "**=",
            MultiplyAssign => "*=",
            DivideAssign => "/=",
            RemainderAssign => "%=",
            BSLAssign => "<<=",
            BSRAssign => ">>=",
            UBSRAssign => ">>>=",
            BitAndAssign => "&=",
            BitXorAssign => "^=",
            BitOrAssign => "|=",
            Spread => "...",
        };
        return str.to_owned();
    }
}

